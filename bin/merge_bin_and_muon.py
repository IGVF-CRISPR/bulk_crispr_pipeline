#!/usr/bin/env python

import numpy as np
import scanpy as sc
import anndata
from sklearn.decomposition import TruncatedSVD
import matplotlib.pyplot as plt
import scrublet as scr
import re
from tqdm import tqdm
import os
import pandas as pd
from glob import glob
import pathlib
import gc
import argparse
import seaborn as sns
from anndata import AnnData, read_h5ad
import muon as mu
import mudata as md


def muon_load(muon_data):
  return md.read(muon_data)
   
    
def merge_data(concat_guide_ann, MERGE=False):
    '''
        Detecting guides targeting the same region.
        Merge the guide counts (sum operation)
        Change the name for an unique target (removing the |1 and |2)
    '''
    print ('Merging guides...')
    
    guides_to_merge = pd.DataFrame.sparse.from_spmatrix(concat_guide_ann.X).T
    if MERGE:
      guides_to_merge['guide'] = [f.split('|')[0] for f in concat_guide_ann.var['feature_name'].values]
    else:
      guides_to_merge['guide'] = [f for f in concat_guide_ann.var['feature_name'].values]

    guides_to_merge_numpy = guides_to_merge[guides_to_merge.columns[:-1]].values  # creating a numpy and removing the last column
    grouped_version = guides_to_merge[[0, 'guide']].groupby('guide')
    guides_to_merge_out = pd.DataFrame([ guides_to_merge_numpy[v.index.values].sum(0) for k,v in grouped_version])
    guides_to_merge_out.index = list(grouped_version.groups.keys())
    guides_to_merge_out.columns = concat_guide_ann.obs.index.values
    return guides_to_merge_out
       
    
def binaryzing_matrix(guides_to_merge_out, GUIDE_UMI_LIMIT=5 ):
    
    print ('Binarizing guide')
    guide_matrix = guides_to_merge_out
    merged_guide_matrix_binary   =  (guide_matrix > GUIDE_UMI_LIMIT) * 1
    return merged_guide_matrix_binary


def formating_exp_matrix(concat_scrna_ann):
    print ('Formating scRNAseq matrix...')
    Gene_matrix  = pd.DataFrame.sparse.from_spmatrix(concat_scrna_ann.X).T #takes a few seconds
    Gene_matrix.columns = concat_scrna_ann.obs.index.values
    Gene_matrix.index = concat_scrna_ann.var['feature_name'].values
    return Gene_matrix
    
   
def generating_covariates(concat_scrna_ann, guide_matrix):
    '''
    percent_mito::Cell quality
    log_number_of_detected_genes : Sequencing depht (dropouts)
    log_total_gene_count: Sequencing depht Transcripts
    log_total_guide_count : Can be generated by low infectinon rate
    '''
    print ('Generating covariate matrix')
    covariate_matrix = pd.DataFrame(concat_scrna_ann.obs['batch_number'].values, columns=['bath_number'])
    covariate_matrix.index = concat_scrna_ann.obs.index.values
    covariate_matrix['percent_mito'] = concat_scrna_ann.obs['percent_mito'].values
    covariate_matrix['log_number_of_detected_genes'] = np.log(concat_scrna_ann.obs['n_genes'].values)
    covariate_matrix['log_total_gene_count'] = np.log(concat_scrna_ann.obs['n_genes'].values +1)
    covariate_matrix['log_total_guide_count'] = np.log(guide_matrix.T.sum(1).values + 1) 
    plt.clf()
    sns.boxplot(x='bath_number',y='log_number_of_detected_genes', data=covariate_matrix)
    plt.title('Variation of the Log(number detected genes) among batchs ')
    plt.savefig('batch_effect_visualization.png')
    return covariate_matrix


def converting_final_table_to_anndata(Gene_matrix, merged_guide_matrix_binary, covariate_matrix, mu_data_to_vars):
    '''
    ## Creating a simple ANNDATA structures
    #The transcriptomes and guide matrix will generate Anndata vars and  the covariates will be stored in the anndata.obs (in both anndatas) 
    '''
    print ('Generating transcripts and guides final anndata files')
    expression = Gene_matrix.copy()
    guide = merged_guide_matrix_binary.copy()
    covariates = covariate_matrix.copy()

    guides_metadata = pd.DataFrame(guide.index.values, columns=['ID'])
    guides_metadata.index = guides_metadata['ID'] # This is necessariy for the ANN data creation

    expression = expression.T
    guide = guide.T
    
    #removing genes with duplicated names
    expression = expression.loc[:,~expression.columns.duplicated()] #remove duplicate genes
    
    ann_exp =   AnnData(X=expression, obs=covariates)
    ann_guide = AnnData(X=guide, obs=covariates)
    #print (']=======================EXPRESSION=========================')
    #print (ann_exp.var.head(), 'ann_exp no muon')
    #print (']=======================GUIDE=========================')
    #print (ann_guide.var.head(), 'ann_guide no muon')
    #print (']=======================muon EXPRESSION=========================')
    mu_data_to_vars['scRNA'].var['ensg'] = mu_data_to_vars['scRNA'].var.index.values
    mu_data_to_vars['scRNA'].var.index = mu_data_to_vars['scRNA'].var['feature_name'].values  
    #print (mu_data_to_vars['scRNA'].var.head())
    #print (']=======================muon GUIDE=========================')
    #print (mu_data_to_vars['guides'].var.head())
    

    set_exp =   set(mu_data_to_vars['scRNA'].var.index.values).intersection(ann_exp.var.index.values)
    #print ('exp set:', len(set_exp))
    set_guide = set(mu_data_to_vars['guides'].var.index.values).intersection(ann_guide.var.index.values)
    #print ('guide set:', len(set_guide))
   
    ann_exp=    ann_exp[: ,   [ x in set_exp for x in       ann_exp.var.index]] 
    ann_guide = ann_guide[: , [ x in set_guide for x in  ann_guide.var.index]]
    
    
    #print (ann_exp)
    #print (ann_guide)
    # print (mu_data_to_vars['scRNA'])
    # print(mu_data_to_vars['guides'])
    
    #print ('==================test=============================')
    #print( (mu_data_to_vars['scRNA'][: ,   [ x in set_exp for x in       mu_data_to_vars['scRNA'].var.index]]).var.shape)
    #print( (mu_data_to_vars['scRNA'][: ,   [ x in set_exp for x in       mu_data_to_vars['scRNA'].var.index]]).var.drop_duplicates())

    #print('==============end=================')
    
    ann_exp.var =      (mu_data_to_vars['scRNA'][: ,   [ x in set_exp for x in       mu_data_to_vars['scRNA'].var.index]]).var.drop_duplicates("feature_name")

    ann_guide.var =     (mu_data_to_vars['guides'][: , [ x in set_guide for x in     mu_data_to_vars['guides'].var.index]]).var.drop_duplicates()


    
    mdata =  mu.MuData({"guides":ann_guide  , "scRNA":   ann_exp })
    mdata.write("processed_mudata_guide_and_transcripts.h5mu")
    # ann_guide.write(f'results_per_lane/processed_anndata_guides_data.h5ad')
    # ann_exp.write(  f'results_per_lane/processed_anndata_transcripts_data.h5ad')
    

print ('executing')

parser = argparse.ArgumentParser(description='Description of your program')

parser.add_argument('--muon_data', help='muon data path', required=True)
parser.add_argument('--merge', action='store_true', 
                    help='Merge transcript counts from multiple runs of the pipeline')
parser.add_argument('--guide_umi_limit', type=int, default=5,
                    help='The maximum number of mismatches allowed for a guide-UMI pair (default: 5)')

args = parser.parse_args()

MUON_DATA = args.muon_data
MERGE= args.merge
GUIDE_UMI_LIMIT= args.guide_umi_limit

mu_data_in =  muon_load(MUON_DATA)
print('guides', mu_data_in['guides'].var.head())
guides_to_merge_out = merge_data( mu_data_in['guides'], MERGE) 

processed_guide = binaryzing_matrix(guides_to_merge_out, GUIDE_UMI_LIMIT )

gene_matrix = formating_exp_matrix(mu_data_in['scRNA'])

covariate_matrix = generating_covariates(mu_data_in['scRNA'] , processed_guide)
print(mu_data_in['guides'].var.head(), 'guides2')
converting_final_table_to_anndata(gene_matrix, processed_guide, covariate_matrix , mu_data_in)
